@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>Vehicle: </label>
		<div>
			<select class="form-control" @bind="booking.VehicleId">
				<option value="">-- Select Vehicle --</option>
				@if (Vehicles != null)
				{
					foreach (var vehicle in Vehicles)
					{
						<option value="@vehicle.Id">@vehicle.Make.Name @vehicle.Model.Name | @vehicle.LicensePlateNumber </option>
					}
				}
			</select>
			<ValidationMessage For="@(() => booking.VehicleId)" />
		</div>
	</div>
	<div class="form-group">
		<label>Customer: </label>
		<div>
			<InputSelect class="form-control" @bind-Value="booking.CustomerId">
				<option value="">-- Select Customer --</option>
				@if (Customers != null)
				{
					foreach (var customer in Customers)
					{
						<option value="@customer.Id">@customer.TaxId | @customer.EmailAddress</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => booking.CustomerId)" />
		</div>
	</div>
	<div class="form-group">
		<label>Date Out:</label>
		<div>
			<InputDate class="form-control" @bind-Value="@booking.DateOut" />
			<ValidationMessage For="@(() => booking.DateOut)" />
		</div>
	</div>

	@if (booking.Id > 0)
	{
		<div class="from-group">
			<label>Date In:</label>
			<div>
				<InputDate class="form-control" @bind-Value="booking.DateIn" />
				<ValidationMessage For="(() => booking.DateIn)" />
			</div>
		</div>
	}

	<br />
	<button type="submit" class="btn btn-success">
		@ButtonText
	</button>
	<br />
	<BackToList Target="bookings" />

</EditForm>

@code {
	[Parameter] public Booking booking { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Customer> Customers;
	private IList<Vehicle> Vehicles;

	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>(Endpoints.CustomersEndpoint);
		Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>(Endpoints.VehiclesEndpoint);
	}


}
